{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LPegRex Grammar",
	"scopeName": "source.lpegrex",
	"patterns": [
		{ "include": "#operators" },
		{ "include": "#string_literal" },
		{ "include": "#keywords" },
		{ "include": "#others" },
		{ "include": "#errors" }
	],
	"repository": {
		"errors": {
			"patterns": [
				{
					"name": "invalid.illegal.lpegrex",
					"match": "\\b[+-]?(([0-9]*\\.[0-9]+)|([0-9]+\\.[0-9]*))\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "^(\\b(?:[a-zA-Z_-][a-zA-Z0-9_-]*)\\b)\\s*(\\<(?:==|-\\||--?))",
					"captures": {
						"1": {
							"name": "variable.name.lpegrex"
						},
						"2": {
							"name": "keyword.operator.lpegrex"
						}
					}
				},
				{
					"match": "^(\\b(?:[a-zA-Z_-][a-zA-Z0-9_-]*)\\b)\\s*(:)\\s*(\\b(?:[a-zA-Z_-][a-zA-Z0-9_-]*)\\b)\\s*(\\<==)",
					"captures": {
						"1": {
							"name": "variable.name.lpegrex"
						},
						"2": {
							"name": "keyword.operator.lpegrex"
						},
						"3": {
							"name": "variable.parameter.lpegrex"
						},
						"4": {
							"name": "keyword.operator.lpegrex"
						}
					}
				},
				{
					"match": "\\{:(\\b([a-zA-Z_-][a-zA-Z0-9_-]*)\\b:)",
					"captures": {
						"1": {
							"name": "keyword.operator.lpegrex"
						}
					}
				},
				{
					"name": "keyword.operator.lpegrex",
					"match": "(~|-|=|\\>)\\>"
				},
				{
					"name": "keyword.operator.lpegrex",
					"match": "/"
				},
				{
					"patterns": [
						{
							"match": "(\\^)\\s*(\\b(?:[a-zA-Z_-][a-zA-Z0-9_-]*)\\b)",
							"captures": {
								"1": {
									"name": "keyword.operator.lpegrex"
								},
								"2": {
									"name": "variable.parameter.lpegrex"
								}
							}
						},
						{
							"match": "(\\^)\\s*[+-]?([0-9+])",
							"captures": {
								"1": {
									"name": "keyword.operator.lpegrex"
								},
								"2": {
									"name": "constant.numeric.lpegrex"
								}
							}
						}
					]
				},
				{
					"name": "support.constant.lpegrex",
					"match": "=(\\b(?:[a-zA-Z_-][a-zA-Z0-9_-]*)\\b)"
				},
				{
					"name": "keyword.operator.lpegrex",
					"match": "(\\~\\?|\\!|\\*|\\?|\\+|\\.)"
				}
			]
		},
		"character_class": {
			"patterns": [
				{
					"name": "keyword.control.lpegrex",
					"match": "%(nl|ca|cb|ct|cn|cv|cf|cr|sp|utf8|utf8seq|ascii|tonil|totrue|tofalse|toemptytable|tochar|toutf8char|tonumber|[ACDGLPSUWXacdglpsuwx])"
				},
				{
					"name": "variable.name.lpegrex",
					"match": "%\\b([a-zA-Z_-][a-zA-Z0-9_-]*)\\b"
				},
				{
					"name": "invalid.illegal.lpegrex",
					"match": "%"
				}
			]
		},
		"string_literal": {
			"patterns": [
				{
					"match": "\\[((?:\\^)?)(.*?)\\]",
					"captures": {
						"1": {
							"name": "keyword.operator.lpegrex"
						},
						"2": {
							"patterns": [
								{
									"name": "keyword.operator.lpegrex",
									"match": "\\^"
								},
								{
									"include": "#character_class"
								},
								{
									"name": "constant.character.escape.lpegrex",
									"match": "\\\\."
								}
							]
						}
					}
				},
				{
					"name": "string.quoted.single.lpegrex",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.lpegrex",
							"match": "\\\\[^']"
						}
					]
				},
				{
					"name": "string.quoted.double.lpegrex",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.lpegrex",
							"match": "\\\\[^\"]"
						}
					]
				},
				{
					"name": "string.quoted.other.lpegrex",
					"begin": "`",
					"end": "`",
					"patterns": [
						{
							"name": "constant.character.escape.lpegrex",
							"match": "\\\\[^`]"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.lpegrex",
					"match": "(tonil|tofalse|totrue|tonumber|tochar|toutf8char)"
				},
				{
					"name": "keyword.control.lpegrex",
					"match": "(foldleft|foldright|rfoldleft|rfoldright)"
				},
				{
					"name": "support.function.lpegrex",
					"match": "(KEYWORD|TOKEN|NAME_SUFFIX|SKIP|EXTRA_TOKENS)"
				}
			]
		},
		"others": {
			"patterns": [
				{ "include": "#character_class" },
				{
					"patterns": [
						{
							"name": "support.class.lpegrex",
							"match": "@\\b([a-zA-Z_-][a-zA-Z0-9_-]*)\\b"
						},
						{
							"name": "string.quoted.other.lpegrex",
							"match": "@('[^']*'|\"[^\"]*\"|`[^`]*`)"
						},
						{
							"name": "invalid.illegal.lpegrex",
							"match": "@"
						}
					]
				},
				{
					"patterns": [
						{
							"name": "invalid.illegal.lpegrex",
							"match": "\\$\\b(([0-9]*\\.[0-9]+)|([0-9]+\\.[0-9]*))\\b"
						},
						{
							"name": "constant.numeric.lpegrex",
							"match": "\\$\\b([0-9]+)\\b"
						},
						{
							"name": "variable.name.lpegrex",
							"match": "\\$\\b([a-zA-Z_-][a-zA-Z0-9_-]*)\\b"
						},
						{
							"name": "string.quoted.other.lpegrex",
							"match": "\\$('[^']*'|\"[^\"]*\"|`[^`]*`)"
						},
						{
							"name": "keyword.operator.lpegrex",
							"match": "\\${([^\\}]*)}",
							"captures": {
								"1": {
									"name": "invalid.illegal.lpegrex"
								}
							}
						},
						{
							"name": "invalid.illegal.lpegrex",
							"match": "\\$"
						}
					]
				},
				{
					"name": "variable.name.lpegrex",
					"match": "\\b([a-zA-Z_-][a-zA-Z0-9_-]*)\\b"
				},
				{
					"name": "comment.line.double-dash.lpegrex",
					"match": "--.*\\n"
				},
				{
					"name": "constant.numeric.lpegrex",
					"match": "\\b[+-]?([0-9]+)\\b"
				}
			]
		}
	}
}